#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages


*version 1.0.0
*author zhangwei 
*last modified by zw on 20070302


= OpenSections =

*Q: what's TOpenSections? What's the relationship between OpenSections and OpenWSN Application layer packet?
*R: 
*TOpenSections is the data structure of a application layer (APP) packet. Essentially, the payload of a NET packet is a TOpenSections object. You can attach the payload buffer to a TOpenSections object and then manipulate the buffer throught its methods.

attention that TOpenSections only regulate the format of the application layer data. it doesn't regulate the meaning/symantics of each items.

attention: in the current implementation, not all the packets in the application layer adopt TOpenSections design, but in the future, we will change them.


*Q: Section and Sections 
*R:
OpenWSN Application layer's packet (OpenApp Packet) is essetially the payload of OpenNET packet. The OpenApp Packet contains serveral sections. Each section data has it own semantics, for example, one section for light data, and one section for vibration data.


Q: TOpenSections format
R:
An APP layer packet can contain serveral data section. each section can hold one type data such as Vibration Sensor, Location, Light Sensor, etc. 

{[1B Data Type]{[1B Data Length]}[nB DataValue]}


[Data Type]
used by the service layer and user defined application layer both. 
  b7,....b1,b0

  b7 = 1 link to another section. this means there's other sections behind current section.
         for the last section in the packet, this bit should be 0
  b6 = 1 section length byte support. this bit means the next byte is section length. 
         if there's no length byte, then the section length is 1 by default.
  b5 = 1 indicate this section is used by the openwsn system. usually, this is a service layer section. 
         for user defined application layer sections, b5 should always be 0.
  b4     reserved. may be for the expansion of [b3,...b0]
  b3-b0  indicate the section type. so now support 16 system sections and 16 user defined sections 
         (under the help of b5)

some may hope that the section control byte can provide REQUEST/RESPONSE/NOTIFICATION information. but I think needn't to do so because we already have such control flags in the NET layer packet controls. these feature should be better the property of packets rather than section's.


Q: the future of TOpenSections
R:
strictly speaking, XML is the best choice for data exchange due to its extensible ability. however, XML is very inefficient for sensor communications. so if possible, you can try design BinaryXml and provide with some easy functions to manipulate it.

at current stage before inventing the BinaryXML, we had to follow the tradition idea. that's what we call "Sections". unlike the tree strucuture XML, sections is a simple list that any one can easily understand it. though it is not so flexible as tree-based XML, it's enough for our current applications. 

Maybe in the future, we will introduce "profile" into our application format like ZigBee. but it still on the way.
profile is the configuration structure rather than communication struction like "OpenSection".



Q: can any one design a BinaryXml and interpreter for openwsn? it should be efficient as TOpenSections as extensible as XMLs.



Q: can any one provide a translator between TOpenSection and standard XML? so we can interact with the sensor network through the gateway node by standard XML language.

