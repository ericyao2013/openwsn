*LibOpen: The Interface/API To Sensor Networks*
*author zhangwei on 20070412
*modified by xxx on 200704

=Q: what's LibOpen/libopen(libsink)=
R: 
libopen(libsink) is a API library that enable the developer to interact with the sensor networks easily. the develper can based their GUI worldview application or Internet-Sensor Networks gateway on libopen.

libopen should be portable easily. thus it can run on a host computer or a embedded device. the low level operating systems can vary from Windows, uCLinux/Linux to other embedded RTOS. 

however, in the current implmentation, it can only run on Windows OS. but we introduced layer design and implementation so that it can be easily ported to other systems.

=Q: architecture of libopen/libsink?=
R:
libopen adopts layer design

Top Layer: all kinds of applications(they are not part of libopen)(application layer)
Middle Layer: core logic of libopen (service layer)
Bottom Layer: abstraction layer (hal layer)

{{{
Application:       [GUI Worldview] [Internet-Sensor Networks Gateway] [Others...]
               ------------------------------------------------------------------------
                                      |||||||||||||||
Middle Layer:                       [libopen services] <---- thread or evolve() driven 
                                      |||||||||||||||
               ------------------------------------------------------------------------
Bottom Layer:  [Simulated Driver]  [Rs232 Driver]  [USB Driver] [Socket Network Driver]
                       |                  |              |                |
                   Harddisk              WSN            WSN       other libopen gateway
}}}

in the architecture design, libopen contains a simulated driver. this driver will generate random wsn data for testing use. thus you can develope/test your upper layers from "libopen" to even "worldview". it can also replace the random data by loading data files from harddisk. these data files may from the real measurement of wsn or generated randomly.

libopen service API include driver selection and configure, raw frame/packet read/write, binary xml data interpretation, data logging control. 

the Internet-Sensor Networks Gateway is a socket server running on the same device with libopen. so you can connect to this server in a remote host computer. while the "socket network driver" is a client helping to to connect "gateway server". different to the other service API, the gateway server must solve the problem of concuurent visiting of libopen (i had not think more about it yet!).  

some one may want a web interface for wsn. the web interface should be based on the gateway server. 

=Q: interface design=
R:
(maybe changed in the future. pls refer to the source code for updated)

high level data service based on binaryxml. 
this interface enable the upper level application to query the sensor data of any time at any location and any time.
{{{
  svc_querynode( nodeid, sensor type, out sensor value (
  svc_querylocation( location, sensor type, out sensor value, out probability )
  svc_query( TQueryCondition * cond, TRangeData * data )
}}}
high level data service such as binaryxml analyzing
{{{ 
  svc_binaryxml_getfirst
  svc_binaryxml_getnext
  svc_binaryxml_getprev
  svc_binaryxml_getlast
}}}
raw data service interface
{{{
  svc_create
  svc_free
  svc_construct
  svc_destroy
  svc_configure
  svc_relation( driver )
  svc_read
  svc_write
  svc_rawread
  svc_rawwrite
  svc_dbgen	generate a random data logging database file
  svc_dbopen	connect to a existed database file
  svc_dbclose	
  svc_dbread	read one data item from the database it's usually a binaryxml format array
  svc_dbwrite
  svc_dbload	load a database file into the memory for further processing
  svc_dbsave	
}}}
driver manipulation interface:
{{{
  svc_relation
  svd_dm_create
  svd_dm_free
  svd_dm_read
  svd_dm_rawread
  svd_dm_write
  svd_dm_rawwrite
  xxx_create
  xxx_free
  xxx_read
  xxx_write
}}}
xxx为driver缩写，包括rs232, usb, socket, webserv
